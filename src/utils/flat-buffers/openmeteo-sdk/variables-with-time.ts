// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { VariableWithValues } from '../openmeteo-sdk/variable-with-values.js';


export class VariablesWithTime {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VariablesWithTime {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVariablesWithTime(bb:flatbuffers.ByteBuffer, obj?:VariablesWithTime):VariablesWithTime {
  return (obj || new VariablesWithTime()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVariablesWithTime(bb:flatbuffers.ByteBuffer, obj?:VariablesWithTime):VariablesWithTime {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VariablesWithTime()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

time():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

timeEnd():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

interval():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

variables(index: number, obj?:VariableWithValues):VariableWithValues|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new VariableWithValues()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

variablesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startVariablesWithTime(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addTime(builder:flatbuffers.Builder, time:bigint) {
  builder.addFieldInt64(0, time, BigInt('0'));
}

static addTimeEnd(builder:flatbuffers.Builder, timeEnd:bigint) {
  builder.addFieldInt64(1, timeEnd, BigInt('0'));
}

static addInterval(builder:flatbuffers.Builder, interval:number) {
  builder.addFieldInt32(2, interval, 0);
}

static addVariables(builder:flatbuffers.Builder, variablesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, variablesOffset, 0);
}

static createVariablesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startVariablesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endVariablesWithTime(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createVariablesWithTime(builder:flatbuffers.Builder, time:bigint, timeEnd:bigint, interval:number, variablesOffset:flatbuffers.Offset):flatbuffers.Offset {
  VariablesWithTime.startVariablesWithTime(builder);
  VariablesWithTime.addTime(builder, time);
  VariablesWithTime.addTimeEnd(builder, timeEnd);
  VariablesWithTime.addInterval(builder, interval);
  VariablesWithTime.addVariables(builder, variablesOffset);
  return VariablesWithTime.endVariablesWithTime(builder);
}
}
